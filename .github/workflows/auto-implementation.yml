name: Claude Code自動実装システム

on:
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: '実装するIssue番号'
        required: true
        type: string
      implementation_type:
        description: '実装タイプ'
        required: true
        default: 'feature'
        type: choice
        options:
        - feature
        - bugfix
        - enhancement
        - refactor

jobs:
  auto-implement:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'auto-implement') || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Python環境をセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Issue情報を取得
      id: issue-info
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          IMPL_TYPE="${{ github.event.inputs.implementation_type }}"
        else
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          IMPL_TYPE="feature"
        fi
        echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        echo "implementation_type=$IMPL_TYPE" >> $GITHUB_OUTPUT
        echo "branch_name=auto-implement-$ISSUE_NUMBER" >> $GITHUB_OUTPUT
    
    - name: 実装用ブランチを作成
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git checkout -b ${{ steps.issue-info.outputs.branch_name }}
    
    - name: 実装プランを生成
      id: plan
      run: |
        cat << 'EOF' > implementation_plan.md
        # 自動実装プラン
        
        ## Issue #${{ steps.issue-info.outputs.issue_number }}
        
        ### 実装タイプ: ${{ steps.issue-info.outputs.implementation_type }}
        
        ### 実装ステップ:
        1. 既存コードの分析
        2. 必要なファイルの特定
        3. 実装の実行
        4. テストの追加/更新
        5. ドキュメントの更新
        
        ### Claude Codeでの実装指示:
        - プロジェクト構造に従った実装
        - エラーハンドリングの適切な実装
        - テストケースの追加
        - 日本語コメントの追加
        
        ---
        *Generated by GitHub Actions Auto-Implementation*
        EOF
    
    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: 実装テンプレートを作成
      run: |
        mkdir -p .github/templates
        cat << 'EOF' > .github/templates/implementation_template.py
        """
        自動実装テンプレート
        Issue #${{ steps.issue-info.outputs.issue_number }}の実装
        """
        
        def implement_feature():
            """
            機能実装のメイン関数
            TODO: 実際の実装をここに追加
            """
            print("実装が開始されました - Issue #${{ steps.issue-info.outputs.issue_number }}")
            # 実装コードをここに追加
            pass
        
        def run_tests():
            """
            テスト実行関数
            """
            print("テストを実行中...")
            # テストコードをここに追加
            pass
        
        if __name__ == "__main__":
            implement_feature()
            run_tests()
        EOF
    
    - name: メイン実装を更新
      run: |
        # メインファイルに新機能の参照を追加
        cat << 'EOF' >> main.py
        
        # Auto-implemented feature for Issue #${{ steps.issue-info.outputs.issue_number }}
        def auto_implemented_feature_${{ steps.issue-info.outputs.issue_number }}():
            """
            Issue #${{ steps.issue-info.outputs.issue_number }}で要求された機能の実装
            実装タイプ: ${{ steps.issue-info.outputs.implementation_type }}
            """
            print("Auto-implemented feature #${{ steps.issue-info.outputs.issue_number }} is running!")
            return "Feature implemented successfully"
        EOF
    
    - name: 基本テストを実行
      run: |
        python3 main.py
        echo "基本テストが成功しました"
    
    - name: 変更をコミット
      run: |
        git add .
        git commit -m "自動実装: Issue #${{ steps.issue-info.outputs.issue_number }}の実装
        
        - 実装タイプ: ${{ steps.issue-info.outputs.implementation_type }}
        - 自動生成された実装テンプレート
        - 基本的なテスト実行確認済み
        
        claude code : auto-implementation-${{ steps.issue-info.outputs.issue_number }}
        
        🤖 Generated with [Claude Code](https://claude.ai/code)
        
        Co-Authored-By: Claude <noreply@anthropic.com>"
    
    - name: 実装ブランチをプッシュ
      run: |
        git push origin ${{ steps.issue-info.outputs.branch_name }}
    
    - name: プルリクエストを作成
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pullRequest } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `自動実装: Issue #${{ steps.issue-info.outputs.issue_number }}`,
            head: '${{ steps.issue-info.outputs.branch_name }}',
            base: 'main',
            body: `## 🤖 自動実装 PR
            
            **Issue:** #${{ steps.issue-info.outputs.issue_number }}
            **実装タイプ:** ${{ steps.issue-info.outputs.implementation_type }}
            
            ### 実装内容
            - 自動生成された実装テンプレート
            - 基本的な機能実装
            - テスト実行確認済み
            
            ### 次のステップ
            - [ ] Claude Codeでの詳細実装
            - [ ] 詳細なテスト追加
            - [ ] エラーハンドリングの改善
            - [ ] ドキュメント更新
            
            ### Claude Codeでの作業方法
            1. このPRをチェックアウト
            2. \`claude code : auto-implementation-${{ steps.issue-info.outputs.issue_number }}\` でセッション開始
            3. 実装の詳細化とテスト追加
            
            ---
            *🤖 自動生成されたPR - GitHub Actions*
            
            Closes #${{ steps.issue-info.outputs.issue_number }}`
          });
          
          // PRにラベルを追加
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pullRequest.number,
            labels: ['auto-implemented', 'claude-code-ready']
          });
    
    - name: Issueにコメント
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: ${{ steps.issue-info.outputs.issue_number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🤖 **自動実装が完了しました！**
            
            **作成されたPR:** 実装内容を確認してください
            **ブランチ:** \`${{ steps.issue-info.outputs.branch_name }}\`
            
            ### 次のステップ
            1. PRをレビュー
            2. Claude Codeで詳細実装
            3. テストの追加・実行
            4. マージ
            
            Claude Codeでの作業を開始するには：
            \`\`\`bash
            git checkout ${{ steps.issue-info.outputs.branch_name }}
            claude code : auto-implementation-${{ steps.issue-info.outputs.issue_number }}
            \`\`\`
            
            ---
            *🤖 GitHub Actions Auto-Implementation*`
          });